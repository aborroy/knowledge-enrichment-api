package org.alfresco.ke.services;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.alfresco.ke.common.OAuthTokenManager;
import org.alfresco.ke.config.AppProperties;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.*;
import org.springframework.stereotype.Component;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.util.UriComponentsBuilder;

import java.net.URI;
import java.net.URLDecoder;
import java.nio.charset.StandardCharsets;
import java.util.*;

/**
 * Minimal client for the Data‑Curation API.
 * <p>No retries, no token management—just straightforward REST calls.</p>
 */
@Component
@RequiredArgsConstructor
@Slf4j
public class DataCurationClient {

    private final RestTemplate restTemplate;
    private final AppProperties config;
    private final OAuthTokenManager tokenManager;

    /**
     * Obtain a short‑lived OAuth2 bearer token for the Data‑Curation service.
     *
     * @return the access token as a {@link String}
     */
    public String getAccessToken() {
        return tokenManager.getAccessToken(
                config.getDataCuration(),
                "environment_authorization",
                "data-curation"
        );
    }

    /**
     * Request a presigned S3 upload URL and accompanying metadata for an incoming file.
     *
     * @param fileName the original file name that will be stored in S3
     * @param options  additional request options understood by the Data‑Curation backend
     * @return a map containing the presigned URL and any extra fields the caller must send with the upload
     */
    public Map<String, Object> presign(String fileName,
                                       Map<String, Object> options) {

        String url = buildUrl("/presign");

        HttpHeaders headers = bearerHeaders();
        headers.setContentType(MediaType.APPLICATION_JSON);

        Map<String, Object> body = new HashMap<>(options);
        body.put("fileName", fileName);

        ParameterizedTypeReference<Map<String, Object>> type = new ParameterizedTypeReference<>() {};

        return restTemplate.exchange(
                        url,
                        HttpMethod.POST,
                        new HttpEntity<>(body, headers),
                        type)
                .getBody();
    }

    /**
     * Upload a binary payload to the provided presigned S3 URL.
     *
     * @param presignedUrl         the HTTPS URL generated by {@link #presign(String, Map)}
     * @param bytes                the file content to upload
     * @param fallbackContentType  content‑type to use when the presigned URL does not encode one
     */
    public void putToS3(String presignedUrl, byte[] bytes, String fallbackContentType) {
        String contentType = extractContentType(presignedUrl)
                .orElse(fallbackContentType);

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.parseMediaType(contentType));
        headers.setContentLength(bytes.length);

        URI uri = UriComponentsBuilder.fromUriString(presignedUrl).build(true).toUri();

        restTemplate.exchange(
                uri,
                HttpMethod.PUT,
                new HttpEntity<>(bytes, headers),
                Void.class);
    }

    /**
     * Poll the Data‑Curation API for the current state of a job.
     *
     * @param jobId the job identifier returned by the initial submission
     * @return a JSON object (as {@code Map}) describing the job status
     */
    public Map<String, Object> status(String jobId) {
        return getJson(buildUrl("/status/" + jobId), getAccessToken());
    }

    /**
     * Retrieve the final results for a completed job.
     *
     * @param jobId the job identifier returned by the initial submission
     * @return the results JSON as a {@code Map}
     */
    public Map<String, Object> results(String jobId) {
        return getJson(buildUrl("/results/" + jobId), getAccessToken());
    }

    /**
     * Perform a GET request expecting a JSON response and return it as a {@code Map}.
     * If the URL belongs to the Data‑Curation API (and is not a presigned results link) a bearer token is applied.
     *
     * @param url         absolute URL to query
     * @param accessToken bearer token to use when authentication is needed
     * @return parsed JSON body as a {@code Map}
     */
    public Map<String, Object> getJson(String url, String accessToken) {
        HttpHeaders headers = needsBearerAuth(url) ? bearerHeaders() : jsonHeaders();

        ParameterizedTypeReference<Map<String, Object>> type = new ParameterizedTypeReference<>() {};

        return restTemplate.exchange(
                        url,
                        HttpMethod.GET,
                        new HttpEntity<>(headers),
                        type)
                .getBody();
    }

    /**
     * Download the result set from a presigned S3 URL and parse it into a {@code Map}.
     *
     * @param presignedUrl the temporary, public URL pointing to a JSON results object in S3
     * @return the parsed JSON, or {@code null} when the object is empty or cannot be parsed
     */
    public Map<String, Object> getPresignedResults(String presignedUrl) {
        URI uri = UriComponentsBuilder.fromUriString(presignedUrl).build(true).toUri();

        String json = restTemplate.exchange(
                        uri,
                        HttpMethod.GET,
                        new HttpEntity<>(jsonHeaders()),
                        String.class)
                .getBody();

        if (json == null || json.isBlank()) return null;

        try {
            return new ObjectMapper().readValue(json, new TypeReference<>() {});
        } catch (Exception e) {
            log.debug("Failed to parse presigned results: {}", e.getMessage());
            return null;
        }
    }

    /**
     * Build an absolute API URL by appending a path to the base URL from configuration.
     */
    private String buildUrl(String path) {
        return UriComponentsBuilder
                .fromUriString(config.getDataCuration().getApiUrl())
                .path(path)
                .toUriString();
    }

    /**
     * Create JSON headers and add a bearer token retrieved via {@link #getAccessToken()}.
     */
    private HttpHeaders bearerHeaders() {
        HttpHeaders headers = jsonHeaders();
        headers.setBearerAuth(getAccessToken());
        return headers;
    }

    /**
     * Return headers that accept JSON responses only.
     */
    private HttpHeaders jsonHeaders() {
        HttpHeaders headers = new HttpHeaders();
        headers.setAccept(List.of(MediaType.APPLICATION_JSON));
        return headers;
    }

    /**
     * Determine whether the given URL points to the Data‑Curation API and therefore needs authentication.
     */
    private boolean needsBearerAuth(String url) {
        return url.startsWith(config.getDataCuration().getApiUrl())
                && !url.contains("/results/");
    }

    /**
     * Extract the {@code content-type} query parameter from the presigned URL, if present.
     *
     * @param url the presigned S3 URL produced by the backend
     * @return the decoded content type, or an empty {@code Optional} when absent
     */
    private Optional<String> extractContentType(String url) {
        return Arrays.stream(url.split("[?&]"))
                .filter(p -> p.startsWith("content-type="))
                .findFirst()
                .map(p -> URLDecoder.decode(p.substring(13),
                        StandardCharsets.UTF_8));
    }
}